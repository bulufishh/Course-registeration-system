{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c21c1ec2-9d60-47c5-9798-bfe191cf3b3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "students.txt has been created with student data.\n"
     ]
    }
   ],
   "source": [
    "students = [\n",
    "    \"23060247,Student1,Student1@gmail.com\"\n",
    "    \"25006537,Student2,Student2@gmail.com\"\n",
    "    \"24136657,Student3,Student3@gmail.com\"\n",
    "    \"25008327,Student4,Student4@gmail.com\"\n",
    "    \"24011224,Student5,Student5@gmail.com\"\n",
    "    \"23090921,Student6,Student6@gmail.com\"\n",
    "    \"23096654,Student7,Student7@gmail.com\"\n",
    "    \"23013246,Student8,Student8@gmail.com\"\n",
    "    \"23135254,Student9,Student9@gmail.com\"\n",
    "    \"24081101,Student10,Student10@gmail.com\"\n",
    "    \"65330021,Student11,Student11@gmail.com\"\n",
    "]\n",
    "\n",
    "with open(\"students.txt\", \"w\") as file:\n",
    "    for student in students:\n",
    "        file.write(student + \"\\n\")\n",
    "\n",
    "print(\"students.txt has been created with student data.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "048f743f-79f4-4313-b46f-6819ce69122c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "courses.txt has been created with course data.\n"
     ]
    }
   ],
   "source": [
    "courses = [\n",
    "    \"CSC1024,Programming Principles,15\",\n",
    "    \"ECN3033,Economics Principle,10\",\n",
    "    \"LES1011,Introduction to Legal Studies,12\"\n",
    "]\n",
    "\n",
    "with open(\"courses.txt\", \"w\") as file:\n",
    "    for course in courses:\n",
    "        file.write(course + \"\\n\")\n",
    "\n",
    "print(\"courses.txt has been created with course data.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "bab79648-43f9-4def-a429-5ad02aa330ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enrollments.txt has been created with the provided enrollment data.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "enrollments = [\n",
    "    \"23060247,CSC1024,2025-01-05\",\n",
    "    \"25006537,CSC1024,2025-01-09\",\n",
    "    \"24136657,CSC1024,2025-01-13\",\n",
    "    \"25008327,CSC1024,2025-01-16\",\n",
    "    \"24011224,CSC1024,2025-01-22\",\n",
    "    \"23090921,ECN3033,2025-02-02\",\n",
    "    \"23096654,ECN3033,2025-02-07\",\n",
    "    \"23013246,LES1011,2025-02-12\",\n",
    "    \"23135254,LES1011,2025-02-23\",\n",
    "    \"24081101,LES1011,2025-02-31\"\n",
    "    ]\n",
    "    \n",
    "with open(\"enrollments.txt\", \"w\") as file:\n",
    "    for enrollment in enrollments:\n",
    "        file.write(enrollment + \"\\n\")\n",
    "    \n",
    "print(\"enrollments.txt has been created with the provided enrollment data.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3eea0f06-6a83-4c32-8d3a-966c99656a5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "----Course Registration System----\n",
      "\n",
      "1. Add a New Student\n",
      "2. Add a New Course\n",
      "3. Enroll Student in a Course\n",
      "4. Drop a Course\n",
      "5. View Available Courses\n",
      "6. View Student Information\n",
      "7. Exit\n",
      "*\n",
      "\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice(1-7):  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "===== Student Registration =====\n",
      "1. Add Student\n",
      "2. Exit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice (1/2):  1\n",
      "Enter Student ID:  1234567\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Er\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter Student ID:  hduienxdhq\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Er\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "\n",
    "#=====Helpers=====\n",
    "students = \"students.txt\"\n",
    "courses = \"courses.txt\"\n",
    "enrollments = \"enrollments.txt\"\n",
    "\n",
    "for file in [students, courses, enrollments]:\n",
    "    if not os.path.exists(file):\n",
    "        open(file, \"w\").close()\n",
    "\n",
    "\n",
    "#=====Core program=====\n",
    "\n",
    "#Choice 1\n",
    "\n",
    "def add_student():\n",
    "    with open(\"students.txt\", \"a\") as file:  \n",
    "        while True:\n",
    "            print(\"\\n===== Student Registration =====\")\n",
    "            print(\"1. Add Student\")\n",
    "            print(\"2. Exit\")\n",
    "            \n",
    "            choice = input(\"Enter your choice (1/2): \")\n",
    "            if choice == \"1\":\n",
    "                while True: \n",
    "                    student_id = input(\"Enter Student ID: \")\n",
    "                    if student_id ==\"\":\n",
    "                        print(\"Returning\")\n",
    "                        return\n",
    "\n",
    "                    else:\n",
    "                        print(\"Er\")\n",
    "                while True:\n",
    "                    student_name = input(\"Enter Student Name: \")\n",
    "\n",
    "                    if student_name.isalnum() or student_num.isdigit():\n",
    "                        print(\"Error:Name cannot contain any numbers or symbols!\")\n",
    "\n",
    "                while True:\n",
    "                    student_contact = input(\"Enter Student Contact: \")\n",
    "                    if not student_contact.isdigit():\n",
    "                        print(\"Error\")\n",
    "\n",
    "                file.write(f\"{student_id},{student_name},{student_contact}\\n\")  #  save to the file\n",
    "                \n",
    "                print(\"\\nStudent details recorded:\")\n",
    "                print(f\"ID: {student_id}, Name: {student_name}, Contact: {student_contact}\")\n",
    "            elif choice == \"2\":\n",
    "                print(\"Records Ended.\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"Invalid choice. Please enter 1 or 2.\")\n",
    "\n",
    "\n",
    "#Choice 2\n",
    "\n",
    "def add_course():\n",
    "    while True:\n",
    "        print(\"\\n===== Course Registration =====\")\n",
    "        course_id = input(\"Enter Course ID: \").strip()\n",
    "        course_name = input(\"Enter Course Name: \").strip()\n",
    "        max_students = input(\"Enter Maximum Students: \").strip()\n",
    "\n",
    "        # Validate course details\n",
    "        if not course_id or not course_name or not max_students.isdigit():\n",
    "            print(\"Error: Invalid input. Course ID and Name are required, and Max Students must be a number.\")\n",
    "            continue\n",
    "        \n",
    "        max_students = int(max_students)\n",
    "\n",
    "        # Check if course already exists\n",
    "        try:\n",
    "            with open(\"courses.txt\", \"r\") as file:\n",
    "                existing_courses = file.readlines()\n",
    "                if any(line.startswith(course_id + \",\") for line in existing_courses):\n",
    "                    print(f\"Error: Course ID {course_id} already exists!\")\n",
    "                    continue\n",
    "        except FileNotFoundError:\n",
    "            pass  # File does not exist yet, so it's safe to create a new one\n",
    "        \n",
    "        # Save course to the file\n",
    "        with open(\"courses.txt\", \"a\") as file:\n",
    "            file.write(f\"{course_id},{course_name},{max_students}\")\n",
    "\n",
    "        print(\"\\nCourse successfully added:\")\n",
    "        print(f\"ID: {course_id}, Name: {course_name}, Max Students: {max_students}\")\n",
    "        \n",
    "        # Ask if user wants to add another course\n",
    "        another = input(\"Do you want to add another course? (yes/no): \").strip().lower()\n",
    "        if another != \"yes\":\n",
    "            break\n",
    "\n",
    "    print(\"Returning to the main menu...\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Choice 3\n",
    "\n",
    "def enroll_in_course():\n",
    "    while True:\n",
    "        print(\"\\n===== Course Enrollment =====\")\n",
    "        student_id = input(\"Enter Student ID: \").strip()\n",
    "        student_name = input(\"Enter Student Name: \").strip()\n",
    "        course_id = input(\"Enter Course ID to Enroll In: \").strip()\n",
    "\n",
    "        if not student_id or not student_name or not course_id:\n",
    "            print(\"Error: Student ID, Name, and Course ID are required.\")\n",
    "            continue\n",
    "\n",
    "        course_exists = False\n",
    "        course_data = None  # To store course info\n",
    "        updated_courses = []  # To store modified course list\n",
    "\n",
    "        try:\n",
    "            with open(\"courses.txt\", \"r\") as file:\n",
    "                courses = file.readlines()\n",
    "\n",
    "            for line in courses:\n",
    "                if line.strip():\n",
    "                    existing_id, course_name, max_students = line.strip().split(\",\")\n",
    "                    max_students = int(max_students)\n",
    "\n",
    "                    if existing_id == course_id:\n",
    "                        course_exists = True\n",
    "                        enrolled_students = 0\n",
    "\n",
    "                        # Count enrolled students in this course\n",
    "                        try:\n",
    "                            with open(\"enrollments.txt\", \"r\") as enroll_file:\n",
    "                                for enroll_line in enroll_file:\n",
    "                                    _, _, enrolled_course = enroll_line.strip().split(\",\")\n",
    "                                    if enrolled_course == course_id:\n",
    "                                        enrolled_students += 1\n",
    "                        except FileNotFoundError:\n",
    "                            pass  # No enrollments yet\n",
    "\n",
    "                        if enrolled_students >= max_students:\n",
    "                            print(f\"Error: Course '{course_name}' is full! No available seats.\")\n",
    "                            continue  # Try another course\n",
    "\n",
    "                        course_data = (existing_id, course_name, max_students, enrolled_students)\n",
    "                        \n",
    "                        # Update available seats by subtracting 1\n",
    "                        new_available_seats = max_students - enrolled_students - 1\n",
    "                        updated_courses.append(f\"{course_id},{course_name},{new_available_seats}\\n\")\n",
    "                    else:\n",
    "                        updated_courses.append(line)  # Keep other courses unchanged\n",
    "\n",
    "        except FileNotFoundError:\n",
    "            print(\"Error: No courses found. Please add courses first.\")\n",
    "            continue\n",
    "\n",
    "        if not course_exists:\n",
    "            print(f\"Error: Course ID '{course_id}' not found!\")\n",
    "            continue\n",
    "\n",
    "        # Check if student is already enrolled\n",
    "        try:\n",
    "            with open(\"enrollments.txt\", \"r\") as file:\n",
    "                for line in file:\n",
    "                    existing_student, _, enrolled_course = line.strip().split(\",\")\n",
    "                    if existing_student == student_id and enrolled_course == course_id:\n",
    "                        print(f\"Error: Student '{student_name}' is already enrolled in this course!\")\n",
    "                        continue\n",
    "        except FileNotFoundError:\n",
    "            pass  # No enrollments yet\n",
    "\n",
    "        # Save the enrollment\n",
    "        with open(\"enrollments.txt\", \"a\") as file:\n",
    "            file.write(f\"{student_id},{student_name},{course_id}\\n\")\n",
    "\n",
    "        # Rewrite courses.txt with updated seat count\n",
    "        with open(\"courses.txt\", \"w\") as file:\n",
    "            file.writelines(updated_courses)\n",
    "\n",
    "        print(\"\\nEnrollment successful:\")\n",
    "        print(f\"Student ID: {student_id}, Name: {student_name}, Course: {course_data[1]} (Seats left: {new_available_seats})\")\n",
    "\n",
    "        another = input(\"Do you want to enroll another student? (yes/no): \").strip().lower()\n",
    "        if another != \"yes\":\n",
    "            break\n",
    "\n",
    "    print(\"Returning to the main menu...\")\n",
    "\n",
    "\n",
    "\n",
    "#Choice 4\n",
    "\n",
    "def drop_course_system():\n",
    "    print(\"\\n===== Drop a Course =====\") #heading\n",
    "    student_id = input(\"Enter your Student ID: \") # Prompt the user to enter their Student ID\n",
    "    course_id = input(\"Enter the Course ID to drop: \") # Prompt the user to enter the Course ID\n",
    "\n",
    "    #Remove the enrollment record from enrollments.txt\n",
    "    enrollment_found = False #to check if the enrollment record has been found\n",
    "    updated_enrollments = [] # List to keep all enrollment records except the one that will be dropped.\n",
    " \n",
    "    try:\n",
    "        with open(\"enrollments.txt\", \"r\") as file: #open enrollments.txt in read mode.\n",
    "            lines = file.readlines() # Read all lines from the file\n",
    "    except FileNotFoundError:\n",
    "        print(\"Error: enrollments.txt file not found.\")\n",
    "        return\n",
    "\n",
    "    # Process each enrollment record (format: StudentID,CourseID,EnrollmentDate)\n",
    "    for line in lines: # Loop through each line in the enrollment data\n",
    "        record = line.strip().split(',') \n",
    "        if len(record) < 3: # If the record doesn't have at least three items, skip this line.\n",
    "            continue  # Skip invalid lines\n",
    "        rec_student_id, rec_course_id, _ = record # Unpack the student ID and course ID from the record\n",
    "        if rec_student_id == student_id and rec_course_id == course_id:\n",
    "            enrollment_found = True \n",
    "        else:\n",
    "            updated_enrollments.append(line) # For all other records, keep them.\n",
    "\n",
    "\n",
    "    # If no matching enrollment was found, inform the user and exit the function.\n",
    "    if not enrollment_found:\n",
    "        print(\"Enrollment record not found. You are not enrolled in the specified course.\")\n",
    "        return\n",
    "    else: # If the record was found, open enrollments.txt in write mode and overwrite it\n",
    "        with open(\"enrollments.txt\", \"w\") as file:\n",
    "            file.writelines(updated_enrollments)\n",
    "        print(\"Enrollment record successfully removed.\")\n",
    "\n",
    "    #Update courses.txt by subtracting 1 from the seat count\n",
    "    course_found = False\n",
    "    updated_courses = []\n",
    "    updated_seats = None  # Used for reporting the new seat count\n",
    "\n",
    "    while not student_name: \n",
    "      student_name=input(\"Student Name cannot be invalid numbers. Enter Student Name\")\n",
    " \n",
    "\n",
    "    try:\n",
    "        with open(\"courses.txt\", \"r\") as file: #open courses.txt in read mode.\n",
    "            course_lines = file.readlines()\n",
    "    except FileNotFoundError:\n",
    "        print(\"Error: courses.txt file not found.\")\n",
    "        return\n",
    "\n",
    "    # Process each course record ( CourseID,CourseName,SeatCount)\n",
    "    for line in course_lines:\n",
    "        record = [field for field in line.split(',')]\n",
    "        if len(record) < 3:\n",
    "            updated_courses.append(line)\n",
    "            continue\n",
    "\n",
    "        current_course_id, course_name, seats_str = record # Unpack the record into variables.\n",
    "\n",
    "        if current_course_id == course_id:\n",
    "            try:\n",
    "                seats = int(seats_str)\n",
    "                seats -= 1  # Subtract one from the seat count (each drop reduces the count)\n",
    "                updated_line = f\"{current_course_id},{course_name},{seats}\\n\"\n",
    "                updated_courses.append(updated_line)\n",
    "                course_found = True #to indicate this course record was found and updated.\n",
    "                updated_seats = seats\n",
    "            except ValueError:\n",
    "                print(f\"Error: Seat count for course {course_id} is not a valid integer.\")\n",
    "                updated_courses.append(line)\n",
    "        else:\n",
    "            updated_courses.append(line)\n",
    "    \n",
    "    if course_found:\n",
    "        with open(\"courses.txt\", \"w\") as file:\n",
    "            file.writelines(updated_courses)\n",
    "        print(f\"A seat has been removed. New seat count for course {course_id}: {updated_seats}\") # Inform the user of the new seat count after the drop.\n",
    "    else:\n",
    "        print(\"Course record not found\") # If no record for the specified course was found\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Choice 5\n",
    "\n",
    "def view_available_courses():\n",
    "    # Print a heading for the course viewing system.\n",
    "    print(\"\\n===== Available Courses =====\\n\")\n",
    "    \n",
    "    # Try to open and read the courses.txt file.\n",
    "    try:\n",
    "        with open(\"courses.txt\", \"r\") as file:\n",
    "            courses = file.readlines()  # Read all course records from the file.\n",
    "    except FileNotFoundError:\n",
    "        # If the courses.txt file is not found, print an error message.\n",
    "        print(\"Error: file not found.\")\n",
    "        return\n",
    "\n",
    "    # Print a formatted header for the output table.\n",
    "    print(\"{:<10} {:<30} {:<15}\".format(\"Course ID\", \"Course Name\", \"Available Seats\"))\n",
    "    print(\"-\" * 60)  # Print a separator line.\n",
    "\n",
    "    # Loop through each course record in the file.\n",
    "    for line in courses:\n",
    "        # Remove any leading/trailing whitespace characters (including newline).\n",
    "        line = line.strip()\n",
    "        # If the line is empty, skip it.\n",
    "        if not line:\n",
    "            continue\n",
    "        \n",
    "        # Split the line by commas into parts.\n",
    "        record = line.split(\",\")\n",
    "        # Check if the record has at least 3 fields.\n",
    "        if len(record) >= 3:\n",
    "            # Extract and clean up each field.\n",
    "            course_id = record[0].strip()\n",
    "            course_name = record[1].strip()\n",
    "            available_seats = record[2].strip()\n",
    "\n",
    "            # Print the course details in a formatted manner.\n",
    "            print(\"{:<10} {:<30} {:<15}\".format(course_id, course_name, available_seats))\n",
    "        else:\n",
    "            # If the line is not in the expected format, print a message indicating a bad record.\n",
    "            print(\"Skipping invalid line:\", line)\n",
    "\n",
    "#Choice6\n",
    "\n",
    "def students_information():\n",
    "    students = 'Students.txt'\n",
    "    try:\n",
    "        with open(students, 'r') as file:\n",
    "            students = file.readlines()\n",
    "        if not students:\n",
    "            print(\"No students found.\")\n",
    "            return\n",
    "\n",
    "        # Header\n",
    "        print(\"===== List of All Students =====\\n\")\n",
    "        print(\"{:<15} {:<30} {:<15}\".format(\"Student ID\", \"Student Name\", \"Contacts\"))\n",
    "        print(\"-\" * 60)\n",
    "\n",
    "        for line in students:\n",
    "\n",
    "            # Remove any leading/trailing whitespace characters (including newline)\n",
    "            line = line.strip()\n",
    "            if not line:\n",
    "                continue\n",
    "\n",
    "            record = line.split(\",\")\n",
    "\n",
    "            if len(record) >= 3:\n",
    "                student_id = record[0].strip()\n",
    "                student_name = record[1].strip()\n",
    "                contacts = record[2].strip()\n",
    "\n",
    "                print(\"{:<15} {:<30} {:<15}\".format(student_id, student_name, contacts))\n",
    "           # print(line.strip())\n",
    "            #print(f\"StudentID: {line[0]}, Name: {line[6]}, Contact: {line[2]}\")\n",
    "    except FileNotFoundError:\n",
    "        print(\"Error: Students file not found.\")\n",
    "\n",
    "\n",
    "\n",
    "\n",
    " #Choice 7\n",
    "\n",
    "def exit_program(exit):\n",
    "    while exit == True: #Start an infinity loop\n",
    "        confirm = input(\"Are you sure you want to exit? (yes/no): \") #Ask the user for exit confirmation\n",
    "        if confirm.lower() == 'yes': #If the user confirms exit\n",
    "            print(\"Exiting program. GoodBye!\") #Print exit message\n",
    "            exit = False #End the loop\n",
    "            return exit\n",
    "        elif confirm.lower() == 'no': #If the user cooses not to exit\n",
    "            print(\"Return to the main menu.\") #Inform about returning to the main menu\n",
    "            return main() #Exit the function without closing the program\n",
    "        else: #If user enters an invalid response\n",
    "            print(\"Invalid input. Please enter 'yes' or 'no'.\") #Propmt for valid input\n",
    "\n",
    "\n",
    "#======Menu system======\n",
    "\n",
    "def main():\n",
    "    exit = True\n",
    "    while exit == True:\n",
    "     #Program Menu \n",
    "        print(\"\\n----Course Registration System----\\n\")\n",
    "        print(\"1. Add a New Student\")\n",
    "        print(\"2. Add a New Course\")\n",
    "        print(\"3. Enroll Student in a Course\")\n",
    "        print(\"4. Drop a Course\")\n",
    "        print(\"5. View Available Courses\")\n",
    "        print(\"6. View Student Information\")\n",
    "        print(\"7. Exit\")\n",
    "        print(\"*\\n\")\n",
    "        #User Choice\n",
    "        choose = input(\"Enter your choice(1-7): \")\n",
    "    \n",
    "        if choose == \"1\":\n",
    "            add_student()\n",
    "        elif choose == \"2\":\n",
    "            add_course()\n",
    "        elif choose == \"3\":\n",
    "            enroll_in_course()\n",
    "        elif choose == \"4\":\n",
    "            drop_course_system()\n",
    "        elif choose == \"5\": \n",
    "            view_available_courses()\n",
    "        elif choose == \"6\":\n",
    "            students_information()\n",
    "        elif choose == \"7\":\n",
    "            exit = exit_program(exit)\n",
    "\n",
    "        else:\n",
    "            print(\"Your choice is not within parameters.\\n\")\n",
    "            print(\"*\\n\")\n",
    "\n",
    "\n",
    "\n",
    "# =====Run Program=====\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n",
    "else:\n",
    "    print(\"This program is run from import.\\n Please, run it directly form code.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "44ea0e40-2bb6-48cc-9886-8b72bfc62c83",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "anaconda-ai-2024.04-py310",
   "language": "python",
   "name": "conda-env-anaconda-ai-2024.04-py310-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
